@using Recipaldinio.Code
@inject StorageHandler storageHandler;
@inject NavigationManager NavMan;
@inject IJSRuntime JsRuntime;
@inject GlobalVarHandler globalVarHandler;


<div class="w-100p bg-bgDefault RecipeForm flex-column justify-center align-center"
     style='height: "auto" : "10vh"); transition-duration: 1.5s'>
    <button @onclick="ToggleCreationForm" class="RecipeForm-OpClBut bg-transparent border-none flex-row align-center h-5vh">
        <i class="@(IsOpen ? "arrowUp" : "arrowDown") cursor-pointer noSelect"></i>
    </button>
    <div class="flex-row justify-center align-start" style="position: absolute; top: 2.75vh">
        <h1 class="text-bgcoloralt m-0 dropShadow-Soft_gray-0_1vh">Recipe Creation Form</h1>
    </div>
    <div style='visibility: @(IsOpen ? "visible" : "hidden");
                height: @(IsOpen ? "90vh" : "0vh");
                transition-duration: 1.5s; transition-delay: 0.1s; overflow: hidden;'
         class='mt-10vh borderRad-1_5vh w-90p bg-midDefault flex-column justify-evenly align-center'>
        <div style="visibility: @(IsOpen ? "visible" : "hidden"); transition-duration: 1.5s;"
             class="w-100p h-100p flex-row justify-evenly align-center">
            <div class="flex-column justify-start align-center w-25p h-100p" style="transition-duration: 1.5s; position: relative;">
                <h1 class="m-0 text-bgcolor dropShadow-Soft_gray-0_1vh" style="position: absolute; top: 1.5vh;">Information</h1>
                <div class="mt-10vh mb-2vh w-100p flex-column justify-start align-center h-100vh" style="overflow: scroll">
                    <div class="flex-row mt-2_25vh h-5vh w-50p justify-center align-center">
                        <input class="w-95p borderRad-1vh bg-bgDefaultAlt p-0_5vh inset-black-0_5vh border-none text-bgcolor alignText-start" id="recipeInputName" type="text" placeholder="Recipe Name" @bind-value="recipe.Information.Name" />
                    </div>
                    <div class="flex-row mt-2_25vh w-75p justify-center align-center">
                        <textarea @oninput="args => { recipe.Information.Description = args.Value.ToString(); }" class="w-95p borderRad-1vh bg-bgDefaultAlt p-0_5vh inset-black-0_5vh border-none text-bgcolor alignText-start" id="recipeInputDescription" placeholder="Recipe Description"></textarea>
                    </div>
                    <div class="flex-column mt-2_25vh h-5vh w-33_3p justify-center align-center">
                        <p class="text-bgcolor dropShadow-Soft_gray-0_1vh fontSize-2vh m-0">Calories</p>
                        <input class="w-95p borderRad-1vh bg-bgDefaultAlt p-0_5vh inset-black-0_5vh border-none text-bgcolor alignText-start" id="recipeInputCalories" type="number" placeholder="Calories" @bind-value="recipe.Information.Calories" />
                    </div>
                    <div class="flex-column mt-2_25vh h-5vh w-33_3p justify-center align-center">
                        <p class="text-bgcolor dropShadow-Soft_gray-0_1vh fontSize-2vh m-0">Proteins</p>
                        <input class="w-95p borderRad-1vh bg-bgDefaultAlt p-0_5vh inset-black-0_5vh border-none text-bgcolor alignText-start" id="recipeInputProteins" type="number" placeholder="proteins" @bind-value="recipe.Information.Proteins" />
                    </div>
                    <div class="flex-column mt-2_25vh h-5vh w-33_3p justify-center align-center">
                        <p class="text-bgcolor dropShadow-Soft_gray-0_1vh fontSize-2vh m-0">Fats</p>
                        <input class="w-95p borderRad-1vh bg-bgDefaultAlt p-0_5vh inset-black-0_5vh border-none text-bgcolor alignText-start" id="recipeInputFats" type="number" placeholder="fats" @bind-value="recipe.Information.Fats" />
                    </div>
                    <div class="flex-column mt-2_25vh h-5vh w-33_3p justify-center align-center">
                        <p class="text-bgcolor dropShadow-Soft_gray-0_1vh fontSize-2vh m-0">Carbohydrates</p>
                        <input class="w-95p borderRad-1vh bg-bgDefaultAlt p-0_5vh inset-black-0_5vh border-none text-bgcolor alignText-start" id="recipeInputCarbohydrates" type="number" placeholder="carbohydrates" @bind-value="recipe.Information.Carbohydrates" />
                    </div>
                    <div class="flex-row mt-2_25vh bg-bgDefaultAlt inset-gray-0_5vh borderRad-0_5vh pt-1_5vh pb-1_5vh h-2_5p w-33_3p justify-evenly align-center">
                        <p class="text-bgcolor fontSize-1_75vh m-0">Is Vegan</p>
                        <input id="recipeInputIsVegan" type="checkbox" placeholder="Vegan" @bind="recipe.Information.IsVegan" />
                    </div>
                    <div class="flex-row mt-2_25vh bg-bgDefaultAlt inset-gray-0_5vh borderRad-0_5vh pt-1_5vh pb-1_5vh h-2_5p w-33_3p justify-evenly align-center">
                        <p class="text-bgcolor fontSize-1_75vh m-0">Contains Pig</p>
                        <input id="recipeInputContainsPig" type="checkbox" placeholder="ContainsPig" @bind="recipe.Information.ContainsPig" />
                    </div>
                </div>
            </div>
            <div class="flex-column justify-start align-center w-25p h-100p" style="transition-duration: 1.5s; position: relative;">
                <h1 class="m-0 text-bgcolor dropShadow-Soft_gray-0_1vh" style="position: absolute; top: 1.5vh;">Ingredients</h1>
                <div class="RecipeForm-OpClBut">
                    <button class="borderRad-2vh border-none pl-0_5vw pr-0_5vw pt-0_5vh pb-0_5vh bg-bgDefaultAlt inset-gray-0_25vh text-bgcolor cursor-pointer" @onclick="AddIngredientClicked">+</button>
                </div>
                <div class="mt-10vh mb-2vh w-100p flex-column justify-start align-center h-100vh" style="overflow: scroll">
                    @for (int i = 0; i < recipe.Ingredients.Count; i++)
                    {
                        int loopi = i;
                        <div class="flex-row ml-2vw mt-2_25vh h-5vh w-75p justify-center align-center">
                            <input class="w-60p borderRad-1vh bg-bgDefaultAlt h-2vh pr-1_5vw pt-1vh pb-1vh pl-0_25vw inset-black-0_5vh border-none text-bgcolor alignText-start" id="IngredientInput@(loopi + 1)" type="text" placeholder="Ingredient @(loopi + 1)" @bind-value="recipe.Ingredients[loopi]" />
                            <span @onclick="() => { DeleteIngredient(loopi); }" style="transform: translateX(-1.5vw);" class="material-symbols-outlined noSelect text-darkred cursor-pointer">delete</span>
                        </div>
                    }
                </div>
            </div>
            <div class="flex-column justify-start align-center w-50p h-100p" style="transition-duration: 1.5s; position: relative;">
                <h1 class="m-0 text-bgcolor dropShadow-Soft_gray-0_1vh" style="position: absolute; top: 1.5vh;">Instructions</h1>
                <div class="RecipeForm-OpClBut mr-5vw">
                    <button class="borderRad-2vh border-none pl-0_5vw pr-0_5vw pt-0_5vh pb-0_5vh bg-bgDefaultAlt inset-gray-0_25vh text-bgcolor cursor-pointer" @onclick="AddInstructionClicked">+</button>
                </div>
                <div class="mt-10vh mb-2vh w-100p flex-column justify-start align-center h-100vh" style="overflow: scroll">
                    @for (int i = 0; i < recipe.Steps.Count; i++)
                    {
                        int loopi = i;
                        <div class="flex-row ml-2vw mt-2_25vh h-5vh w-75p justify-center align-center">
                            <input class="w-75p borderRad-1vh bg-bgDefaultAlt h-2vh pr-1_5vw pt-1vh pb-1vh pl-0_25vw inset-black-0_5vh border-none text-bgcolor alignText-start" id="InstructionInput@(loopi + 1)" type="text" placeholder="Instruction @(loopi + 1)" @bind-value="recipe.Steps[loopi]" />
                            <span @onclick="() => { DeleteInstruction(loopi); }" style="transform: translateX(-1.5vw);" class="material-symbols-outlined noSelect text-darkred cursor-pointer">delete</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div style="visibility: @(IsOpen ? "visible" : "hidden"); transition-duration: 0.5s; transition-delay: @(IsOpen ? "1s" : "0"); overflow: hidden;"
         class="flex-row justify-center align-center mt-2_5vh mb-2_5vh w-100p @(IsOpen ? "h-10vh" : "h-0")">
        <button @onclick="CreateRecipe" class="w-25p h-50p bg-midDefault borderRad-1_5vh fontSize-1_25vh border-none cursor-pointer text-bgcolor">Create Recipe</button>
    </div>
</div>

@code {
    /// <summary>
    /// <para>Max Ingredients allowed to add.</para>
    /// <para>-1 means infinite Ingredients allowed.</para>
    /// </summary>
    [Parameter]
    public int MaxIngredients { get; set; } = -1;
    /// <summary>
    /// Wether the Form is opened or not on default.
    /// </summary>
    [Parameter]
    public bool IsOpen { get; set; } = false;
    /// <summary>
    /// <para>Max Instructions allowed to add.</para>
    /// <para>-1 means infinite Instructions allowed.</para>
    /// </summary>
    [Parameter]
    public int MaxInstructions { get; set; } = -1;

    public Recipe recipe = new Recipe();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (globalVarHandler.DebugEnabled)
            {
                var recipes = await storageHandler.RetrieveValueAsync();
                foreach (Recipe _recipe in recipes)
                {
                    Console.WriteLine($"Name: {_recipe.Information.Name}");
                    Console.WriteLine($"Description: {_recipe.Information.Description}");
                    Console.WriteLine($"Calories: {_recipe.Information.Calories}{_recipe.Units.InformationUnits.Calories}");
                    Console.WriteLine($"Fats: {_recipe.Information.Fats}{_recipe.Units.InformationUnits.Fats}");
                    Console.WriteLine($"Proteins: {_recipe.Information.Proteins}{_recipe.Units.InformationUnits.Proteins}");
                    Console.WriteLine($"Carbohydrates: {_recipe.Information.Carbohydrates}{_recipe.Units.InformationUnits.Carbohydrates}");
                    Console.WriteLine($"IsVegan: {_recipe.Information.IsVegan}");
                    Console.WriteLine($"ContainsPig: {_recipe.Information.ContainsPig}");
                    Console.WriteLine("\n---------------------------------------\n");
                }
            }
            for (int i = 0; i < 5; i++)
            {
                await AddIngredientClicked();
                await AddInstructionClicked();
            }
        }
    }

    public void ToggleCreationForm()
    {
        IsOpen = !IsOpen;
        StateHasChanged();
    }

    public async Task AddIngredientClicked()
    {
        if (MaxIngredients == -1 || recipe.Ingredients.Count < MaxIngredients)
        {
            recipe.Ingredients.Add("");
        }

        StateHasChanged();
    }

    public void DeleteIngredient(int index)
    {
        recipe.Ingredients.RemoveAt(index);
        StateHasChanged();
    }

    public async Task AddInstructionClicked()
    {
        if (MaxInstructions == -1 || recipe.Steps.Count < MaxInstructions)
        {
            recipe.Steps.Add("");
        }
        StateHasChanged();
    }

    public void DeleteInstruction(int index)
    {
        recipe.Steps.RemoveAt(index);
        StateHasChanged();
    }

    public async Task CreateRecipe()
    {
        bool userConfirmaton = await JsRuntime.InvokeAsync<bool>("confirm",
            $"are you sure you want to add \"{recipe.Information.Name}\"? " +
            $"\nOther Info:" +
            $"\n-Description: {recipe.Information.Description}," +
            $"\n-Calories: {recipe.Information.Calories}{recipe.Units.InformationUnits.Calories}," +
            $"\n-Fats: {recipe.Information.Fats}{recipe.Units.InformationUnits.Fats}," +
            $"\n-Proteins: {recipe.Information.Proteins}{recipe.Units.InformationUnits.Proteins}," +
            $"\n-Carbohydrates: {recipe.Information.Carbohydrates}{recipe.Units.InformationUnits.Carbohydrates}," +
            $"\nSteps: {recipe.Steps.Count}," +
            $"\nIngredients: {recipe.Ingredients.Count}.");
        if (userConfirmaton)
        {
            await storageHandler.AddRecipe(recipe);
            recipe = new Recipe();
            NavMan.NavigateTo(NavMan.Uri);
            StateHasChanged();
        }
    }
}
